const { Blog, User, Notification } = require("../../models");

// L·∫•y t·∫•t c·∫£ blogs (public)
const getAllBlogs = async (req, res) => {
    try {
        const blogs = await Blog.find()
            .populate("author", "name email")
            .sort({ createdAt: -1 });
        res.json(blogs);
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: "Server error" });
    }
};

// L·∫•y blogs c·ªßa seller
const getSellerBlogs = async (req, res) => {
    try {
        const sellerId = req.user.id;
        const blogs = await Blog.find({ author: sellerId })
            .populate("author", "name email")
            .sort({ createdAt: -1 });
        res.json(blogs);
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: "Server error" });
    }
};

// L·∫•y chi ti·∫øt 1 blog
const getBlogById = async (req, res) => {
    try {
        const blog = await Blog.findById(req.params.id).populate("author", "name email");
        if (!blog) {
            return res.status(404).json({ error: "Blog not found" });
        }
        res.json(blog);
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: "Server error" });
    }
};

// T·∫°o blog m·ªõi (seller only)
const createBlog = async (req, res) => {
    try {
        const { title, description, content, images, link } = req.body;
        const author = req.user.id;

        if (!title) {
            return res.status(400).json({ error: "Title is required" });
        }

        const blog = new Blog({
            title,
            description,
            content,
            images: images || [],
            link,
            author,
        });

        await blog.save();
        const populatedBlog = await Blog.findById(blog._id).populate("author", "name email");

        // üîî G·ª≠i th√¥ng b√°o cho t·∫•t c·∫£ ng∆∞·ªùi d√πng
        try {
            // L·∫•y t·∫•t c·∫£ users (c√≥ th·ªÉ l·ªçc theo ƒëi·ªÅu ki·ªán n·∫øu c·∫ßn)
            const allUsers = await User.find({ role: { $ne: "seller" } }).select("_id");
            
            if (allUsers.length > 0) {
                // T·∫°o m·∫£ng notifications cho t·∫•t c·∫£ users
                const notifications = allUsers.map(user => ({
                    user: user._id,
                    title: "üì∞ B√†i vi·∫øt m·ªõi!",
                    message: `${populatedBlog.author.name || "Seller"} v·ª´a ƒëƒÉng b√†i vi·∫øt m·ªõi: "${title}"`,
                    type: "Blog",
                    relatedBlog: blog._id,
                }));

                // Insert nhi·ªÅu notifications c√πng l√∫c
                await Notification.insertMany(notifications);
                console.log(`‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o blog m·ªõi cho ${allUsers.length} ng∆∞·ªùi d√πng`);
            }
        } catch (notifError) {
            console.error("‚ö†Ô∏è L·ªói khi g·ª≠i th√¥ng b√°o blog:", notifError);
            // Kh√¥ng block response n·∫øu notification fail
        }

        res.status(201).json({
            ok: true,
            message: "Blog created successfully",
            data: populatedBlog,
        });
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: "Server error" });
    }
};

// C·∫≠p nh·∫≠t blog (ch·ªâ author m·ªõi ƒë∆∞·ª£c s·ª≠a)
const updateBlog = async (req, res) => {
    try {
        const blogId = req.params.id;
        const userId = req.user.id;
        const { title, description, content, images, link } = req.body;

        const blog = await Blog.findById(blogId);
        if (!blog) {
            return res.status(404).json({ error: "Blog not found" });
        }

        // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
        if (blog.author.toString() !== userId) {
            return res.status(403).json({ error: "You are not authorized to edit this blog" });
        }

        // C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng
        if (title !== undefined) blog.title = title;
        if (description !== undefined) blog.description = description;
        if (content !== undefined) blog.content = content;
        if (images !== undefined) blog.images = images;
        if (link !== undefined) blog.link = link;

        await blog.save();
        const updatedBlog = await Blog.findById(blog._id).populate("author", "name email");

        res.json({
            ok: true,
            message: "Blog updated successfully",
            data: updatedBlog,
        });
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: "Server error" });
    }
};

// X√≥a blog (ch·ªâ author m·ªõi ƒë∆∞·ª£c x√≥a)
const deleteBlog = async (req, res) => {
    try {
        const blogId = req.params.id;
        const userId = req.user.id;

        const blog = await Blog.findById(blogId);
        if (!blog) {
            return res.status(404).json({ error: "Blog not found" });
        }

        // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
        if (blog.author.toString() !== userId) {
            return res.status(403).json({ error: "You are not authorized to delete this blog" });
        }

        await Blog.findByIdAndDelete(blogId);

        res.json({
            ok: true,
            message: "Blog deleted successfully",
        });
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: "Server error" });
    }
};

module.exports = {
    getAllBlogs,
    getSellerBlogs,
    getBlogById,
    createBlog,
    updateBlog,
    deleteBlog,
};

