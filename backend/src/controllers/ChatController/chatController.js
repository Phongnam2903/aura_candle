const axios = require("axios");

/**
 * X·ª≠ l√Ω chat gi·ªØa ng∆∞·ªùi d√πng v√† chatbot
 */
const handleChat = async (req, res) => {
    const { message } = req.body;

    // Ki·ªÉm tra ƒë·∫ßu v√†o
    if (!message || message.trim() === "") {
        return res.status(400).json({ error: "Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng." });
    }

    let retries = 3; // Th·ª≠ l·∫°i 3 l·∫ßn n·∫øu b·ªã l·ªói 429
    const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

    while (retries > 0) {
        try {
            const response = await axios.post(
                "https://api.openai.com/v1/chat/completions",
                {
                    model: "gpt-3.5-turbo",
                    messages: [
                        {
                            role: "system",
                            content:
                                "B·∫°n l√† chuy√™n gia t∆∞ v·∫•n n·∫øn th∆°m. H√£y tr·∫£ l·ªùi th√¢n thi·ªán, ng·∫Øn g·ªçn v√† c√≥ emoji.",
                        },
                        { role: "user", content: message },
                    ],
                },
                {
                    headers: {
                        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
                        "Content-Type": "application/json",
                    },
                }
            );

            const botReply = response.data.choices[0].message.content;
            return res.json({ reply: botReply });
        } catch (error) {
            // N·∫øu l·ªói 429 (rate limit) ‚Üí ch·ªù r·ªìi th·ª≠ l·∫°i
            if (error.response && error.response.status === 429) {
                console.warn("‚ö†Ô∏è OpenAI qu√° t·∫£i - ƒë·ª£i 3 gi√¢y r·ªìi th·ª≠ l·∫°i...");
                retries--;
                await delay(3000);
            } else {
                console.error("‚ùå L·ªói g·ªçi OpenAI:", error.message);
                console.error("Chi ti·∫øt:", error.response?.data || error);
                return res
                    .status(500)
                    .json({ error: "Chatbot ƒëang b·∫≠n, th·ª≠ l·∫°i sau nh√© üòÖ" });
            }
        }
    }

    // N·∫øu th·ª≠ 3 l·∫ßn v·∫´n l·ªói 429
    res.status(429).json({
        error: "OpenAI ƒëang qu√° t·∫£i, vui l√≤ng th·ª≠ l·∫°i sau v√†i ph√∫t üò≠",
    });
};

module.exports = {
    handleChat,
};
