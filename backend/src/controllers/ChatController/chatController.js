const axios = require("axios");
const { Product, Category } = require("../../models");

/**
 * L·∫•y th√¥ng tin s·∫£n ph·∫©m v√† m√πi h∆∞∆°ng t·ª´ database
 */
const getShopContext = async () => {
    try {
        // L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m v·ªõi category v√† materials
        const products = await Product.find({ isActive: true })
            .populate('category', 'name')
            .select('name price fragrances category')
            .limit(50); // Gi·ªõi h·∫°n ƒë·ªÉ kh√¥ng qu√° d√†i

        // L·∫•y t·∫•t c·∫£ m√πi h∆∞∆°ng unique
        const allFragrances = new Set();
        products.forEach(p => {
            if (p.fragrances && Array.isArray(p.fragrances)) {
                p.fragrances.forEach(f => allFragrances.add(f));
            }
        });

        // L·∫•y categories
        const categories = await Category.find().select('name');

        // Format data cho chatbot
        const productList = products.map(p => ({
            name: p.name,
            price: p.price,
            fragrances: p.fragrances || [],
            category: p.category?.name || 'Ch∆∞a ph√¢n lo·∫°i'
        }));

        return {
            fragrances: Array.from(allFragrances).sort(),
            categories: categories.map(c => c.name),
            products: productList,
            totalProducts: products.length
        };
    } catch (error) {
        console.error('‚ùå L·ªói l·∫•y shop context:', error);
        return {
            fragrances: [],
            categories: [],
            products: [],
            totalProducts: 0
        };
    }
};

/**
 * T·∫°o system prompt th√¥ng minh v·ªõi context
 */
const createSystemPrompt = (shopContext) => {
    const { fragrances, categories, products } = shopContext;

    return `B·∫°n l√† AI t∆∞ v·∫•n b√°n h√†ng th√¥ng minh c·ªßa Aura Candle - shop n·∫øn th∆°m cao c·∫•p.

üìç TH√îNG TIN SHOP:
- T·ªïng s·∫£n ph·∫©m: ${products.length} lo·∫°i n·∫øn th∆°m
- Danh m·ª•c: ${categories.join(', ')}
- M√πi h∆∞∆°ng c√≥ s·∫µn: ${fragrances.length > 0 ? fragrances.join(', ') : 'ƒêang c·∫≠p nh·∫≠t'}

üéØ NHI·ªÜM V·ª§:
1. T∆∞ v·∫•n s·∫£n ph·∫©m ph√π h·ª£p v·ªõi nhu c·∫ßu kh√°ch
2. Gi·ªõi thi·ªáu m√πi h∆∞∆°ng d·ª±a tr√™n s·ªü th√≠ch
3. G·ª£i √Ω s·∫£n ph·∫©m ph√π h·ª£p v·ªõi t·ª´ng d·ªãp
4. Tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ n·∫øn th∆°m, c√°ch s·ª≠ d·ª•ng, b·∫£o qu·∫£n

üìù C√ÅCH TR·∫¢ L·ªúI:
- Th√¢n thi·ªán, nhi·ªát t√¨nh, c√≥ emoji ph√π h·ª£p üïØÔ∏è
- Ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu (2-4 c√¢u)
- N·∫øu h·ªèi v·ªÅ m√πi ‚Üí List m√πi c√≥ s·∫µn
- N·∫øu h·ªèi v·ªÅ gi√° ‚Üí Recommend trong t·∫ßm gi√°
- N·∫øu h·ªèi v·ªÅ d·ªãp ‚Üí G·ª£i √Ω ph√π h·ª£p

üí° V√ç D·ª§:
Q: "C√≥ m√πi n√†o th∆°m nh·∫π nh√†ng?"
A: "Shop m√¨nh c√≥ m·∫•y m√πi nh·∫π nh√†ng b·∫°n c√≥ th·ªÉ th√≠ch: Lavender (th∆∞ gi√£n), Vanilla (ng·ªçt ng√†o), ho·∫∑c White Tea (thanh tao) üå∏ B·∫°n th√≠ch lo·∫°i n√†o nh·∫•t?"

Q: "T·∫∑ng sinh nh·∫≠t b·∫°n n√™n ch·ªçn n·∫øn g√¨?"
A: "ƒê·ªÉ t·∫∑ng sinh nh·∫≠t, m√¨nh recommend n·∫øn h∆∞∆°ng Rose ho·∫∑c Sweet Peach - th∆°m ng·ªçt ng√†o v√† sang tr·ªçng üéÅ Ho·∫∑c b·∫°n c√≥ th·ªÉ ch·ªçn set qu√† t·∫∑ng ƒë·ªÉ tr√¥ng x·ªãn h∆°n nha!"

‚ö†Ô∏è L∆ØU √ù:
- KH√îNG b·ªãa m√πi h∆∞∆°ng kh√¥ng c√≥ trong danh s√°ch
- N·∫øu kh√¥ng ch·∫Øc ‚Üí H·ªèi th√™m kh√°ch ƒë·ªÉ hi·ªÉu r√µ nhu c·∫ßu
- Link s·∫£n ph·∫©m: Ch·ªâ c·∫ßn t√™n, kh√°ch t·ª± search tr√™n web
- Lu√¥n k·∫øt th√∫c b·∫±ng c√¢u h·ªèi ƒë·ªÉ ti·∫øp t·ª•c conversation`;
};

/**
 * X·ª≠ l√Ω chat gi·ªØa ng∆∞·ªùi d√πng v√† chatbot
 */
const handleChat = async (req, res) => {
    const { message, conversationHistory = [] } = req.body;

    // Ki·ªÉm tra ƒë·∫ßu v√†o
    if (!message || message.trim() === "") {
        return res.status(400).json({ error: "Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng." });
    }

    let retries = 5; // TƒÉng t·ª´ 3 ‚Üí 5 l·∫ßn
    const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

    // L·∫•y context t·ª´ shop
    const shopContext = await getShopContext();
    const systemPrompt = createSystemPrompt(shopContext);

    // Build messages v·ªõi conversation history
    const messages = [
        { role: "system", content: systemPrompt },
        ...conversationHistory.slice(-6), // Gi·ªØ 6 tin nh·∫Øn g·∫ßn nh·∫•t ƒë·ªÉ ti·∫øt ki·ªám tokens
        { role: "user", content: message }
    ];

    let currentDelay = 2000; // B·∫Øt ƒë·∫ßu v·ªõi 2 gi√¢y
    
    while (retries > 0) {
        try {
            const response = await axios.post(
                "https://api.openai.com/v1/chat/completions",
                {
                    model: "gpt-3.5-turbo",
                    messages: messages,
                    temperature: 0.7,
                    max_tokens: 300,
                },
                {
                    headers: {
                        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
                        "Content-Type": "application/json",
                    },
                    timeout: 30000, // 30 seconds timeout
                }
            );

            const botReply = response.data.choices[0].message.content;
            
            return res.json({ 
                reply: botReply,
                shopContext: {
                    availableFragrances: shopContext.fragrances,
                    categories: shopContext.categories
                }
            });
        } catch (error) {
            if (error.response && error.response.status === 429) {
                retries--;
                console.warn(`‚ö†Ô∏è OpenAI qu√° t·∫£i - ƒë·ª£i ${currentDelay/1000}s r·ªìi th·ª≠ l·∫°i... (C√≤n ${retries} l·∫ßn)`);
                
                if (retries > 0) {
                    await delay(currentDelay);
                    currentDelay *= 2; // Exponential backoff: 2s ‚Üí 4s ‚Üí 8s ‚Üí 16s ‚Üí 32s
                }
            } else {
                console.error("‚ùå L·ªói g·ªçi OpenAI:", error.message);
                console.error("Chi ti·∫øt:", error.response?.data || error);
                
                // Fallback response n·∫øu OpenAI fail
                return res.json({
                    reply: `Xin l·ªói, m√¨nh ƒëang h∆°i b·∫≠n üòÖ Nh∆∞ng shop c√≥ c√°c m√πi: ${shopContext.fragrances.slice(0, 5).join(', ')}${shopContext.fragrances.length > 5 ? '...' : ''}. B·∫°n quan t√¢m m√πi n√†o nh·∫•t?`,
                    shopContext: {
                        availableFragrances: shopContext.fragrances,
                        categories: shopContext.categories
                    }
                });
            }
        }
    }

    // Fallback n·∫øu retry h·∫øt
    res.status(429).json({
        error: "OpenAI ƒëang qu√° t·∫£i, vui l√≤ng th·ª≠ l·∫°i sau v√†i ph√∫t üò≠",
    });
};

module.exports = {
    handleChat,
};
