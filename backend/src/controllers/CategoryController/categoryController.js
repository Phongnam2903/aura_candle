const Category = require("../../models/Category");
const cloudinary = require("../../config/cloudinary");

// =============================
// [GET] L·∫•y t·∫•t c·∫£ danh m·ª•c
// =============================
const getAllCategories = async (req, res) => {
    try {
        const categories = await Category.find().sort({ name: 1 });
        res.json(categories);
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "L·ªói l·∫•y danh m·ª•c" });
    }
};

// =============================
// [GET] L·∫•y danh m·ª•c theo ID
// =============================
const getCategoryById = async (req, res) => {
    try {
        const category = await Category.findById(req.params.id);
        if (!category) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c" });
        }
        res.json(category);
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "L·ªói l·∫•y danh m·ª•c" });
    }
};

// =============================
// [POST] T·∫°o danh m·ª•c (c√≥ upload ·∫£nh)
// =============================
// [POST] T·∫°o danh m·ª•c
const createCategory = async (req, res) => {
    try {
        const { name, description, image } = req.body;
        let imageUrl = image || ""; // n·∫øu frontend g·ª≠i URL th√¨ d√πng lu√¥n

        // N·∫øu c√≥ upload file m·ªõi th√¨ ghi ƒë√®
        if (req.file) {
            const result = await cloudinary.uploader.upload(req.file.path, {
                folder: "categories",
            });
            imageUrl = result.secure_url;
        }

        console.log("üì• Nh·∫≠n d·ªØ li·ªáu t·ª´ frontend:", { name, description, image, file: req.file });
        console.log("‚úÖ ·∫¢nh s·∫Ω l∆∞u v√†o DB:", imageUrl);

        const category = new Category({
            name,
            description,
            image: imageUrl,
        });

        await category.save();
        console.log("üíæ Category saved:", category);

        res.status(201).json({
            message: "T·∫°o danh m·ª•c th√†nh c√¥ng",
            category,
        });
    } catch (err) {
        console.error("‚ùå Create category error:", err);
        res.status(500).json({ message: "L·ªói t·∫°o danh m·ª•c" });
    }
};

// =============================
// [PUT] C·∫≠p nh·∫≠t danh m·ª•c (c√≥ upload ·∫£nh m·ªõi)
// =============================
const updateCategory = async (req, res) => {
    try {
        const { name, description, image } = req.body;
        const updateData = { name, description };

        // üñºÔ∏è N·∫øu multer (CloudinaryStorage) ƒë√£ upload ·∫£nh m·ªõi
        if (req.file && req.file.path) {
            updateData.image = req.file.path; // Multer ƒë√£ c√≥ s·∫µn link Cloudinary
        }
        // üß© N·∫øu kh√¥ng c√≥ file m·ªõi nh∆∞ng c√≥ s·∫µn URL trong body ‚Üí gi·ªØ nguy√™n ·∫£nh c≈©
        else if (image) {
            updateData.image = image;
        }

        const category = await Category.findByIdAndUpdate(
            req.params.id,
            updateData,
            { new: true, runValidators: true }
        );

        if (!category) {
            return res.status(404).json({ message: "‚ùå Kh√¥ng t√¨m th·∫•y danh m·ª•c" });
        }

        res.status(200).json({
            message: "‚úÖ C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng",
            category,
        });
    } catch (err) {
        console.error("üî• Update category error:", err);
        res.status(500).json({ message: "L·ªói server khi c·∫≠p nh·∫≠t danh m·ª•c" });
    }
};

// =============================
// [DELETE] X√≥a danh m·ª•c
// =============================
const deleteCategory = async (req, res) => {
    try {
        const category = await Category.findByIdAndDelete(req.params.id);
        if (!category) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c" });
        }
        res.json({ message: "ƒê√£ x√≥a danh m·ª•c th√†nh c√¥ng" });
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "L·ªói x√≥a danh m·ª•c" });
    }
};

module.exports = {
    getAllCategories,
    getCategoryById,
    createCategory,
    updateCategory,
    deleteCategory,
};
