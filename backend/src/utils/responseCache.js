/**
 * Response Cache ƒë·ªÉ l∆∞u c√¢u tr·∫£ l·ªùi OpenAI
 * Ti·∫øt ki·ªám API calls cho c√¢u h·ªèi gi·ªëng nhau
 */

const NodeCache = require('node-cache');

// Cache v·ªõi TTL = 1 hour
const cache = new NodeCache({ stdTTL: 3600, checkperiod: 120 });

/**
 * T·∫°o cache key t·ª´ message v√† context
 */
function createCacheKey(message, conversationHistory = []) {
    // N·∫øu c√≥ history ‚Üí Kh√¥ng cache (context-dependent)
    if (conversationHistory.length > 0) {
        return null;
    }
    
    // Normalize message (lowercase, trim, remove extra spaces)
    const normalized = message.toLowerCase().trim().replace(/\s+/g, ' ');
    
    // Hash ƒë·ªÉ l√†m key ng·∫Øn g·ªçn
    return `chat:${normalized}`;
}

/**
 * L·∫•y cached response
 */
function getCachedResponse(message, conversationHistory = []) {
    const key = createCacheKey(message, conversationHistory);
    if (!key) return null;
    
    const cached = cache.get(key);
    if (cached) {
        console.log('‚úÖ Cache HIT:', key);
        return cached;
    }
    
    console.log('‚ùå Cache MISS:', key);
    return null;
}

/**
 * L∆∞u response v√†o cache
 */
function setCachedResponse(message, conversationHistory, response) {
    const key = createCacheKey(message, conversationHistory);
    if (!key) return false;
    
    cache.set(key, response);
    console.log('üíæ Cached response:', key);
    return true;
}

/**
 * X√≥a cache (n·∫øu c·∫ßn)
 */
function clearCache() {
    cache.flushAll();
    console.log('üóëÔ∏è Cache cleared');
}

/**
 * L·∫•y stats
 */
function getCacheStats() {
    return cache.getStats();
}

module.exports = {
    getCachedResponse,
    setCachedResponse,
    clearCache,
    getCacheStats
};

